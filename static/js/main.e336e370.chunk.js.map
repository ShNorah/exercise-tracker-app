{"version":3,"sources":["components/Navbar.js","components/CreateUser.js","components/EditExercise.js","components/CreateExercise.js","components/ExerciseList.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","src","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","CreateUser","props","onChangeUsername","bind","onSubmit","state","username","e","this","setState","target","value","preventDefault","user","console","log","axios","post","then","res","data","required","onChange","EditExercise","CreateExercise","onChangeDescription","onChangeDuration","onChangeDate","description","duration","date","Date","users","get","response","length","map","exercise","window","location","ref","key","selected","ExerciseList","App","path","exact","component","ExercisesList","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yOAGqBA,E,uKAEb,OACE,yBAAKC,UAAU,0DACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAK,KAClC,yBAAKC,IAAI,uCAAuCC,IAAI,MAEtD,4BACEH,UAAU,iBACVI,KAAK,SACLC,cAAY,WACZC,cAAY,oBACZC,gBAAc,mBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMT,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BU,GAAG,oBAC3C,wBAAIV,UAAU,sBACZ,wBAAIA,UAAU,mBACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAI,KAA/B,YAEE,0BAAMD,UAAU,WAAhB,eAGJ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,WAA9B,oBAIF,wBAAID,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,SAA9B,wB,GAjCgBU,a,yBCAfC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAEhB,EAAKE,MAAQ,CACXC,SAAU,IAPK,E,6DAWFC,GACfC,KAAKC,SAAS,CACZH,SAAUC,EAAEG,OAAOC,U,+BAIdJ,GACPA,EAAEK,iBACF,IAAMC,EAAO,CACXP,SAAUE,KAAKH,MAAMC,UAGvBQ,QAAQC,IAAIF,GAEZG,IAAMC,KAAK,kCAAmCJ,GAC3CK,MAAK,SAAAC,GAAG,OAAIL,QAAQC,IAAII,EAAIC,SAC7BZ,KAAKC,SAAS,CACVH,SAAU,O,+BAKhB,OACE,6BACE,0BAAMF,SAAUI,KAAKJ,UACnB,yBAAKhB,UAAU,cACb,2CACA,2BACEI,KAAK,OACL6B,UAAQ,EACRjC,UAAU,eACVuB,MAAOH,KAAKH,MAAMC,SAClBgB,SAAUd,KAAKN,oBAGnB,yBAAKd,UAAU,cACb,2BACEI,KAAK,SACLmB,MAAM,cACRvB,UAAY,4B,GAnDCW,aCDnBwB,E,uKAEb,OACI,6BACI,4D,GAJ0BxB,a,iBCGrByB,G,yDACnB,WAAYvB,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKsB,oBAAsB,EAAKA,oBAAoBtB,KAAzB,gBAC3B,EAAKuB,iBAAmB,EAAKA,iBAAiBvB,KAAtB,gBACxB,EAAKwB,aAAe,EAAKA,aAAaxB,KAAlB,gBACpB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAEhB,EAAKE,MAAQ,CACXC,SAAU,GACVsB,YAAa,GACbC,SAAU,GACVC,KAAM,IAAIC,KACVC,MAAO,IAdQ,E,gEAmBE,IAAD,OAClBhB,IAAMiB,IAAI,gCACPf,MAAK,SAAAgB,GACAA,EAASd,KAAKe,OAAS,GACzB,EAAK1B,SAAS,CACZuB,MAAOE,EAASd,KAAKgB,KAAI,SAAAvB,GAAI,OAAIA,EAAKP,YACtCA,SAAU4B,EAASd,KAAK,GAAGd,gB,uCAOpBC,GACfC,KAAKC,SAAS,CACZH,SAAUC,EAAEG,OAAOC,U,0CAGFJ,GACnBC,KAAKC,SAAS,CACZmB,YAAarB,EAAEG,OAAOC,U,uCAGRJ,GAChBC,KAAKC,SAAS,CACZoB,SAAUtB,EAAEG,OAAOC,U,mCAGTmB,GACZtB,KAAKC,SAAS,CACZqB,KAAMA,M,+BAIDvB,GACPA,EAAEK,iBACF,IAAMyB,EAAW,CACf/B,SAAUE,KAAKH,MAAMC,SACrBsB,YAAapB,KAAKH,MAAMuB,YACxBC,SAAUrB,KAAKH,MAAMwB,SACrBC,KAAMtB,KAAKH,MAAMyB,MAGnBhB,QAAQC,IAAIsB,GACZrB,IACGC,KAAK,qCAAsCoB,GAC3CnB,MAAK,SAACC,GAAD,OAASL,QAAQC,IAAII,EAAIC,SACjCkB,OAAOC,SAAW,M,+BAGlB,OACE,6BACE,uDACA,0BAAMnC,SAAUI,KAAKJ,UACnB,yBAAKhB,UAAU,cACb,4CACA,4BACEoD,IAAI,YACJnB,UAAQ,EACRjC,UAAU,eACVuB,MAAOH,KAAKH,MAAMC,SAClBgB,SAAUd,KAAKN,kBAEdM,KAAKH,MAAM2B,MAAMI,KAAI,SAAUvB,GAC9B,OACE,4BAAQ4B,IAAK5B,EAAMF,MAAOE,GACvBA,QAMX,yBAAKzB,UAAU,cACb,8CACA,2BACEI,KAAK,OACLJ,UAAU,eACVuB,MAAOH,KAAKH,MAAMuB,YAClBN,SAAUd,KAAKiB,uBAGnB,yBAAKrC,UAAU,cACb,0DACA,2BACEI,KAAK,OACLJ,UAAU,eACVuB,MAAOH,KAAKH,MAAMwB,SAClBP,SAAUd,KAAKkB,oBAGnB,yBAAKtC,UAAU,cACb,yCACA,iCAAM,kBAAC,IAAD,CAAYsD,SAAUlC,KAAKH,MAAMyB,KACrCR,SAAYd,KAAKmB,iBAGrB,4BAAQnC,KAAK,SAASJ,UAAU,mBAAhC,6B,GApHkCW,cCHvB4C,E,uKAGb,OACE,6BACE,wE,GAL8B5C,aCyB3B6C,MAff,WACE,OACE,kBAAC,IAAD,KACE,yBAAKxD,UAAY,aACjB,kBAAC,EAAD,MACA,6BACA,kBAAC,IAAD,CAAOyD,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAK,WAAWE,UAAWxB,IAClC,kBAAC,IAAD,CAAOsB,KAAK,UAAUE,UAAWvB,IAC/B,kBAAC,IAAD,CAAOqB,KAAK,QAAQE,UAAW/C,OCTnBiD,QACW,cAA7BX,OAAOC,SAASW,UAEe,UAA7BZ,OAAOC,SAASW,UAEhBZ,OAAOC,SAASW,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,a","file":"static/js/main.e336e370.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Navbar extends Component{\r\n    render() {\r\n        return (\r\n          <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark static-top\">\r\n            <div className=\"container\">\r\n              <Link className=\"navbar-brand\" to = \"#\">\r\n                <img src=\"http://placehold.it/150x50?text=Logo\" alt=\"\" />\r\n              </Link>\r\n              <button\r\n                className=\"navbar-toggler\"\r\n                type=\"button\"\r\n                data-toggle=\"collapse\"\r\n                data-target=\"#navbarResponsive\"\r\n                aria-controls=\"navbarResponsive\"\r\n                aria-expanded=\"false\"\r\n                aria-label=\"Toggle navigation\"\r\n              >\r\n                <span className=\"navbar-toggler-icon\" />\r\n              </button>\r\n              <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\r\n                <ul className=\"navbar-nav ml-auto\">\r\n                  <li className=\"nav-item active\">\r\n                    <Link className=\"nav-link\" to =\"/\">\r\n                     Exercises\r\n                      <span className=\"sr-only\">(current)</span>\r\n                 </Link>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/create\">\r\n                      Create Exercise\r\n                    </Link>\r\n                  </li>\r\n                  <li className=\"nav-item\">\r\n                    <Link className=\"nav-link\" to=\"/user\">\r\n                      Create User\r\n                    </Link>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n        );\r\n    }\r\n}","import React, { Component } from \"react\";\r\nimport axios from 'axios';  //library for connecting backend to frontend\r\n\r\nexport default class CreateUser extends Component {\r\n                 constructor(props) {\r\n                   super(props);\r\n                   //deefining this\r\n                   this.onChangeUsername = this.onChangeUsername.bind(this);\r\n                   this.onSubmit = this.onSubmit.bind(this);\r\n\r\n                   this.state = {\r\n                     username: \"\",\r\n                   };\r\n                 }\r\n\r\n                 onChangeUsername(e) {\r\n                   this.setState({\r\n                     username: e.target.value,\r\n                   });\r\n                 }\r\n\r\n                 onSubmit(e) {\r\n                   e.preventDefault(); //prevents the default html behaviour from taking place\r\n                   const user = {\r\n                     username: this.state.username,\r\n                   };\r\n\r\n                   console.log(user);\r\n                   //posting the user to the db\r\n                   axios.post('http://localhost:4000/users/add', user)\r\n                     .then(res => console.log(res.data));\r\n                     this.setState({\r\n                         username: \"\"\r\n                     })\r\n                   //window.location = \"/\";\r\n                 }\r\n                 render() {\r\n                   return (\r\n                     <div>\r\n                       <form onSubmit={this.onSubmit}>\r\n                         <div className=\"form-group\">\r\n                           <label>Username</label>\r\n                           <input\r\n                             type=\"text\"\r\n                             required\r\n                             className=\"form-control\"\r\n                             value={this.state.username}\r\n                             onChange={this.onChangeUsername}\r\n                           />\r\n                         </div>\r\n                         <div className=\"form-group\">\r\n                           <input\r\n                             type=\"submit\"\r\n                             value=\"Create User\"\r\n                           className = \" btn btn-primary\" />\r\n\r\n                         </div>\r\n                       </form>\r\n                     </div>\r\n                   );\r\n                 }\r\n               }\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class EditExercise extends Component{\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>Edit exercises Component</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport axios from 'axios';\r\n\r\nexport default class CreateExercise extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //deefining this\r\n    this.onChangeUsername = this.onChangeUsername.bind(this);\r\n    this.onChangeDescription = this.onChangeDescription.bind(this);\r\n    this.onChangeDuration = this.onChangeDuration.bind(this);\r\n    this.onChangeDate = this.onChangeDate.bind(this);\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    this.state = {\r\n      username: '',\r\n      description: '',\r\n      duration: '',\r\n      date: new Date(),\r\n      users: []\r\n    }\r\n  }\r\n\r\n  //lifecycle method will be called before anything displays on the page\r\n  componentDidMount() {\r\n    axios.get('http://localhost:4000/users/')\r\n      .then(response => {\r\n        if (response.data.length > 0) {\r\n          this.setState({\r\n            users: response.data.map(user => user.username),\r\n            username: response.data[0].username\r\n        })\r\n      }\r\n    })\r\n    \r\n  }\r\n  //update state properties target is the textbox and value is the value\r\n  onChangeUsername(e) {\r\n    this.setState({\r\n      username: e.target.value\r\n    });\r\n  }\r\n   onChangeDescription(e) {\r\n    this.setState({\r\n      description: e.target.value\r\n    });\r\n  }\r\n   onChangeDuration(e) {\r\n    this.setState({\r\n      duration: e.target.value\r\n    });\r\n  }\r\n   onChangeDate(date) {\r\n    this.setState({\r\n      date: date\r\n    });\r\n  }\r\n\r\n  onSubmit(e) {\r\n    e.preventDefault() //prevents the default html behaviour from taking place\r\n    const exercise = {\r\n      username: this.state.username,\r\n      description: this.state.description,\r\n      duration: this.state.duration,\r\n      date: this.state.date\r\n    }\r\n\r\n    console.log(exercise);\r\n    axios\r\n      .post(\"http://localhost:4000/exercise/add\", exercise)\r\n      .then((res) => console.log(res.data));\r\n    window.location = '/'\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Create new Exercise log</h1>\r\n        <form onSubmit={this.onSubmit}>\r\n          <div className=\"form-group\">\r\n            <label>Username:</label>\r\n            <select\r\n              ref=\"userInput\"\r\n              required\r\n              className=\"form-control\"\r\n              value={this.state.username}\r\n              onChange={this.onChangeUsername}\r\n            >\r\n              {this.state.users.map(function (user) {\r\n                return (\r\n                  <option key={user} value={user}>\r\n                    {user}\r\n                  </option>\r\n                );\r\n              })}\r\n            </select>\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Description</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              value={this.state.description}\r\n              onChange={this.onChangeDescription}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Duration (in minutes): </label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              value={this.state.duration}\r\n              onChange={this.onChangeDuration}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <label>Date: </label>\r\n            <div> <DatePicker selected={this.state.date}\r\n              onChange = {this.onChangeDate}/>\r\n            </div>\r\n          </div>\r\n          <button type=\"submit\" className=\"btn btn-primary\">\r\n            Create Exercise Log\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class ExerciseList extends Component{\r\n\r\n    render() {\r\n        return (\r\n          <div>\r\n            <h3>welcome to the exercise tracker app</h3>\r\n          </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n//import { Route, Switch} from 'react-router';\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\n//IMPORT ALL COMPONENTS\r\nimport Navbar from './components/Navbar';\r\nimport CreateUser from './components/CreateUser';\r\nimport EditExercise from './components/EditExercise'; \r\nimport CreateExercise from './components/CreateExercise';\r\nimport ExercisesList from './components/ExerciseList';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className = 'container'>\r\n      <Navbar />\r\n      <br />\r\n      <Route path=\"/\" exact component={ExercisesList} />\r\n      <Route path=\"/edit:id\" component={EditExercise} />\r\n      <Route path='/create' component={CreateExercise} />\r\n        <Route path='/user' component={CreateUser} />\r\n        </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}